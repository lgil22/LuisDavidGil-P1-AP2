
@page "/consultaProducto"
@using LuisDavidGil_P1_AP2.Models
@using LuisDavidGil_P1_AP2.BLL
@inject NavigationManager Nav

@inject IToastService toast


<div class="card">

    <div class="col-sm-4">
        <h3>Consulta de Producto</h3>
    </div>

    <div class="col-sm-3">
        <select class="custom-select" @bind="filtro">
            <option value="0">Todos</option>
            <option value="1">Id</option>
            <option value="2">Descripci√≥n</option>
            <option value="3">Existencia</option>
            <option value="4">Costo</option>
            <option value="5">Valor de Inventario</option>
        </select>
    </div>

    <div class="col-sm-3">
        <div class="form-group">
            <div class="form-row">
                <div class="input-group">
                    <div class="col">
                        <input type="text" class="form-control" placeholder="Criterio" @bind="criterio" />
                    </div>

                    <div class="col-sm-2">
                        <button type="button" class="btn btn-primary" @onclick="Consultar">Consultar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>



    <table class="table">
        <thead class="thead-light">
            <tr>
                <th>Id</th>
                <th>Descripcion</th>
                <th>Existencia</th>
                <th>Costo</th>
                <th>Valor Inventario</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in lista)
            {
                <tr>
                    <td>@item.id</td>
                    <td>@item.Descripcion</td>
                    <td>@item.Existencia</td>
                    <td>@item.Costo</td>
                    <td>@item.ValorInventario</td>
                </tr>
            }
        </tbody>

    </table>

</div>


@code {

    public int filtro { get; set; }

    public string criterio { get; set; }

    public List<Productos> lista = new List<Productos>();

    public decimal total { get; set; }


    private void Consultar()
    {
        try
        {
            switch (filtro)
            {
                case 0: //Todos
                    this.lista = ProductosBLL.GetList(p => true);
                    SumarValor();
                    break;
                case 1: //Id
                    int ID = GetId();
                    this.lista = ProductosBLL.GetList(p => p.id == ID);
                    SumarValor();
                    break;
                case 2: //descripcion
                    this.lista = ProductosBLL.GetList(p => p.Descripcion == criterio);
                    SumarValor();
                    break;
                case 3: //existencia
                    int existencia = GetExistencia();
                    this.lista = ProductosBLL.GetList(p => p.Existencia == existencia);
                    SumarValor();
                    break;
                case 4: //costo
                    decimal costo = GetCosto();
                    this.lista = ProductosBLL.GetList(p => p.Costo == costo);
                    SumarValor();
                    break;
                case 5://valor de inventario
                    decimal valor = GetValorInventario();
                    this.lista = ProductosBLL.GetList(p => p.ValorInventario == valor);
                    SumarValor();
                    break;
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private int GetId()
    {
        int resultado = 0;

        try
        {
            resultado = Convert.ToInt32(criterio);
            return resultado;
        }
        catch (Exception)
        {

            toast.ShowError("El Id debe ser numerico..");
        }

        return resultado;
    }

    private int GetExistencia()
    {
        int existencia = 0;

        try
        {
            existencia = Convert.ToInt32(criterio);
            return existencia;
        }
        catch (Exception)
        {

            toast.ShowError("La existencia debe ser numerico..");
        }

        return existencia;
    }

    private decimal GetCosto()
    {
        decimal costo = 0;

        try
        {
            costo = Convert.ToDecimal(criterio);
            return costo;
        }
        catch (Exception)
        {

            toast.ShowError("El costo debe ser numerico..");
        }

        return costo;
    }

    private decimal GetValorInventario()
    {
        decimal valor = 0;

        try
        {
            valor = Convert.ToDecimal(criterio);
            return valor;
        }
        catch (Exception)
        {

            toast.ShowError("El valor debe ser numerico..");
        }

        return valor;
    }

    private void SumarValor()
    {
        decimal auxValor = 0;
        if (lista != null)
        {
            foreach (var item in lista)
            {
                auxValor += item.ValorInventario;
            }

            total = auxValor;
        }

    }

}